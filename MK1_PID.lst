0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1034 (Dec 12 2012) (MSVC)
0000              4   ; This file was generated Sat Mar 28 13:30:53 2015
0000              5   ;--------------------------------------------------------
                  5   $name MK1_PID
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public __c51_external_startup
0000             28            public _pwm_temp
0000             29            public _dErr
0000             30            public _errSum
0000             31            public _past5
0000             32            public _prevError
0000             33            public _error
0000             34            public _ySetPoint
0000             35            public _setPoint
0000             36            public _position
0000             37            public _PIDcalculation
0000             38            public _fivePointMovingAvg
0000             39            public _waitms
0000             40            public _resetHCTL
0000             41            public _decode
0000             42            public _readBits
0000             43            public _SPIWrite
0000             44            public _GetADC
0000             45   ;--------------------------------------------------------
0000             46   ; Special Function Registers
0000             47   ;--------------------------------------------------------
0000             48   _ACC            DATA 0xe0
0000             49   _B              DATA 0xf0
0000             50   _PSW            DATA 0xd0
0000             51   _SP             DATA 0x81
0000             52   _SPX            DATA 0xef
0000             53   _DPL            DATA 0x82
0000             54   _DPH            DATA 0x83
0000             55   _DPLB           DATA 0xd4
0000             56   _DPHB           DATA 0xd5
0000             57   _PAGE           DATA 0xf6
0000             58   _AX             DATA 0xe1
0000             59   _BX             DATA 0xf7
0000             60   _DSPR           DATA 0xe2
0000             61   _FIRD           DATA 0xe3
0000             62   _MACL           DATA 0xe4
0000             63   _MACH           DATA 0xe5
0000             64   _PCON           DATA 0x87
0000             65   _AUXR           DATA 0x8e
0000             66   _AUXR1          DATA 0xa2
0000             67   _DPCF           DATA 0xa1
0000             68   _CKRL           DATA 0x97
0000             69   _CKCKON0        DATA 0x8f
0000             70   _CKCKON1        DATA 0xaf
0000             71   _CKSEL          DATA 0x85
0000             72   _CLKREG         DATA 0xae
0000             73   _OSCCON         DATA 0x85
0000             74   _IE             DATA 0xa8
0000             75   _IEN0           DATA 0xa8
0000             76   _IEN1           DATA 0xb1
0000             77   _IPH0           DATA 0xb7
0000             78   _IP             DATA 0xb8
0000             79   _IPL0           DATA 0xb8
0000             80   _IPH1           DATA 0xb3
0000             81   _IPL1           DATA 0xb2
0000             82   _P0             DATA 0x80
0000             83   _P1             DATA 0x90
0000             84   _P2             DATA 0xa0
0000             85   _P3             DATA 0xb0
0000             86   _P4             DATA 0xc0
0000             87   _P0M0           DATA 0xe6
0000             88   _P0M1           DATA 0xe7
0000             89   _P1M0           DATA 0xd6
0000             90   _P1M1           DATA 0xd7
0000             91   _P2M0           DATA 0xce
0000             92   _P2M1           DATA 0xcf
0000             93   _P3M0           DATA 0xc6
0000             94   _P3M1           DATA 0xc7
0000             95   _P4M0           DATA 0xbe
0000             96   _P4M1           DATA 0xbf
0000             97   _SCON           DATA 0x98
0000             98   _SBUF           DATA 0x99
0000             99   _SADEN          DATA 0xb9
0000            100   _SADDR          DATA 0xa9
0000            101   _BDRCON         DATA 0x9b
0000            102   _BRL            DATA 0x9a
0000            103   _TCON           DATA 0x88
0000            104   _TMOD           DATA 0x89
0000            105   _TCONB          DATA 0x91
0000            106   _TL0            DATA 0x8a
0000            107   _TH0            DATA 0x8c
0000            108   _TL1            DATA 0x8b
0000            109   _TH1            DATA 0x8d
0000            110   _RL0            DATA 0xf2
0000            111   _RH0            DATA 0xf4
0000            112   _RL1            DATA 0xf3
0000            113   _RH1            DATA 0xf5
0000            114   _WDTRST         DATA 0xa6
0000            115   _WDTPRG         DATA 0xa7
0000            116   _T2CON          DATA 0xc8
0000            117   _T2MOD          DATA 0xc9
0000            118   _RCAP2H         DATA 0xcb
0000            119   _RCAP2L         DATA 0xca
0000            120   _TH2            DATA 0xcd
0000            121   _TL2            DATA 0xcc
0000            122   _SPCON          DATA 0xc3
0000            123   _SPSTA          DATA 0xc4
0000            124   _SPDAT          DATA 0xc5
0000            125   _SSCON          DATA 0x93
0000            126   _SSCS           DATA 0x94
0000            127   _SSDAT          DATA 0x95
0000            128   _SSADR          DATA 0x96
0000            129   _KBLS           DATA 0x9c
0000            130   _KBE            DATA 0x9d
0000            131   _KBF            DATA 0x9e
0000            132   _KBMOD          DATA 0x9f
0000            133   _BMSEL          DATA 0x92
0000            134   _FCON           DATA 0xd2
0000            135   _EECON          DATA 0xd2
0000            136   _ACSRA          DATA 0xa3
0000            137   _ACSRB          DATA 0xab
0000            138   _AREF           DATA 0xbd
0000            139   _DADC           DATA 0xa4
0000            140   _DADI           DATA 0xa5
0000            141   _DADL           DATA 0xac
0000            142   _DADH           DATA 0xad
0000            143   _CCON           DATA 0xd8
0000            144   _CMOD           DATA 0xd9
0000            145   _CL             DATA 0xe9
0000            146   _CH             DATA 0xf9
0000            147   _CCAPM0         DATA 0xda
0000            148   _CCAPM1         DATA 0xdb
0000            149   _CCAPM2         DATA 0xdc
0000            150   _CCAPM3         DATA 0xdd
0000            151   _CCAPM4         DATA 0xde
0000            152   _CCAP0H         DATA 0xfa
0000            153   _CCAP1H         DATA 0xfb
0000            154   _CCAP2H         DATA 0xfc
0000            155   _CCAP3H         DATA 0xfd
0000            156   _CCAP4H         DATA 0xfe
0000            157   _CCAP0L         DATA 0xea
0000            158   _CCAP1L         DATA 0xeb
0000            159   _CCAP2L         DATA 0xec
0000            160   _CCAP3L         DATA 0xed
0000            161   _CCAP4L         DATA 0xee
0000            162   ;--------------------------------------------------------
0000            163   ; special function bits
0000            164   ;--------------------------------------------------------
0000            165   _ACC_0          BIT 0xe0
0000            166   _ACC_1          BIT 0xe1
0000            167   _ACC_2          BIT 0xe2
0000            168   _ACC_3          BIT 0xe3
0000            169   _ACC_4          BIT 0xe4
0000            170   _ACC_5          BIT 0xe5
0000            171   _ACC_6          BIT 0xe6
0000            172   _ACC_7          BIT 0xe7
0000            173   _B_0            BIT 0xf0
0000            174   _B_1            BIT 0xf1
0000            175   _B_2            BIT 0xf2
0000            176   _B_3            BIT 0xf3
0000            177   _B_4            BIT 0xf4
0000            178   _B_5            BIT 0xf5
0000            179   _B_6            BIT 0xf6
0000            180   _B_7            BIT 0xf7
0000            181   _P              BIT 0xd0
0000            182   _F1             BIT 0xd1
0000            183   _OV             BIT 0xd2
0000            184   _RS0            BIT 0xd3
0000            185   _RS1            BIT 0xd4
0000            186   _F0             BIT 0xd5
0000            187   _AC             BIT 0xd6
0000            188   _CY             BIT 0xd7
0000            189   _EX0            BIT 0xa8
0000            190   _ET0            BIT 0xa9
0000            191   _EX1            BIT 0xaa
0000            192   _ET1            BIT 0xab
0000            193   _ES             BIT 0xac
0000            194   _ET2            BIT 0xad
0000            195   _EC             BIT 0xae
0000            196   _EA             BIT 0xaf
0000            197   _PX0            BIT 0xb8
0000            198   _PT0            BIT 0xb9
0000            199   _PX1            BIT 0xba
0000            200   _PT1            BIT 0xbb
0000            201   _PS             BIT 0xbc
0000            202   _PT2            BIT 0xbd
0000            203   _IP0D           BIT 0xbf
0000            204   _PPCL           BIT 0xbe
0000            205   _PT2L           BIT 0xbd
0000            206   _PLS            BIT 0xbc
0000            207   _PT1L           BIT 0xbb
0000            208   _PX1L           BIT 0xba
0000            209   _PT0L           BIT 0xb9
0000            210   _PX0L           BIT 0xb8
0000            211   _P0_0           BIT 0x80
0000            212   _P0_1           BIT 0x81
0000            213   _P0_2           BIT 0x82
0000            214   _P0_3           BIT 0x83
0000            215   _P0_4           BIT 0x84
0000            216   _P0_5           BIT 0x85
0000            217   _P0_6           BIT 0x86
0000            218   _P0_7           BIT 0x87
0000            219   _P1_0           BIT 0x90
0000            220   _P1_1           BIT 0x91
0000            221   _P1_2           BIT 0x92
0000            222   _P1_3           BIT 0x93
0000            223   _P1_4           BIT 0x94
0000            224   _P1_5           BIT 0x95
0000            225   _P1_6           BIT 0x96
0000            226   _P1_7           BIT 0x97
0000            227   _P2_0           BIT 0xa0
0000            228   _P2_1           BIT 0xa1
0000            229   _P2_2           BIT 0xa2
0000            230   _P2_3           BIT 0xa3
0000            231   _P2_4           BIT 0xa4
0000            232   _P2_5           BIT 0xa5
0000            233   _P2_6           BIT 0xa6
0000            234   _P2_7           BIT 0xa7
0000            235   _P3_0           BIT 0xb0
0000            236   _P3_1           BIT 0xb1
0000            237   _P3_2           BIT 0xb2
0000            238   _P3_3           BIT 0xb3
0000            239   _P3_4           BIT 0xb4
0000            240   _P3_5           BIT 0xb5
0000            241   _P3_6           BIT 0xb6
0000            242   _P3_7           BIT 0xb7
0000            243   _RXD            BIT 0xb0
0000            244   _TXD            BIT 0xb1
0000            245   _INT0           BIT 0xb2
0000            246   _INT1           BIT 0xb3
0000            247   _T0             BIT 0xb4
0000            248   _T1             BIT 0xb5
0000            249   _WR             BIT 0xb6
0000            250   _RD             BIT 0xb7
0000            251   _P4_0           BIT 0xc0
0000            252   _P4_1           BIT 0xc1
0000            253   _P4_2           BIT 0xc2
0000            254   _P4_3           BIT 0xc3
0000            255   _P4_4           BIT 0xc4
0000            256   _P4_5           BIT 0xc5
0000            257   _P4_6           BIT 0xc6
0000            258   _P4_7           BIT 0xc7
0000            259   _RI             BIT 0x98
0000            260   _TI             BIT 0x99
0000            261   _RB8            BIT 0x9a
0000            262   _TB8            BIT 0x9b
0000            263   _REN            BIT 0x9c
0000            264   _SM2            BIT 0x9d
0000            265   _SM1            BIT 0x9e
0000            266   _SM0            BIT 0x9f
0000            267   _IT0            BIT 0x88
0000            268   _IE0            BIT 0x89
0000            269   _IT1            BIT 0x8a
0000            270   _IE1            BIT 0x8b
0000            271   _TR0            BIT 0x8c
0000            272   _TF0            BIT 0x8d
0000            273   _TR1            BIT 0x8e
0000            274   _TF1            BIT 0x8f
0000            275   _CP_RL2         BIT 0xc8
0000            276   _C_T2           BIT 0xc9
0000            277   _TR2            BIT 0xca
0000            278   _EXEN2          BIT 0xcb
0000            279   _TCLK           BIT 0xcc
0000            280   _RCLK           BIT 0xcd
0000            281   _EXF2           BIT 0xce
0000            282   _TF2            BIT 0xcf
0000            283   _CF             BIT 0xdf
0000            284   _CR             BIT 0xde
0000            285   _CCF4           BIT 0xdc
0000            286   _CCF3           BIT 0xdb
0000            287   _CCF2           BIT 0xda
0000            288   _CCF1           BIT 0xd9
0000            289   _CCF0           BIT 0xd8
0000            290   ;--------------------------------------------------------
0000            291   ; overlayable register banks
0000            292   ;--------------------------------------------------------
0000            293            rbank0 segment data overlay
0000            294   ;--------------------------------------------------------
0000            295   ; internal ram data
0000            296   ;--------------------------------------------------------
0000            297            rseg R_DSEG
0000            298   _position:
0000            299            ds 2
0002            300   _setPoint:
0002            301            ds 2
0004            302   _ySetPoint:
0004            303            ds 2
0006            304   _error:
0006            305            ds 2
0008            306   _prevError:
0008            307            ds 2
000A            308   _past5:
000A            309            ds 10
0014            310   _errSum:
0014            311            ds 2
0016            312   _dErr:
0016            313            ds 2
0018            314   _pwm_temp:
0018            315            ds 2
001A            316   _PIDcalculation_error_1_77:
001A            317            ds 2
001C            318   _PIDcalculation_sloc0_1_0:
001C            319            ds 4
0020            320   _fivePointMovingAvg_prevError_1_79:
0020            321            ds 2
0022            322   ;--------------------------------------------------------
0022            323   ; overlayable items in internal ram 
0022            324   ;--------------------------------------------------------
0000            325            rseg    R_OSEG
0000            326            rseg    R_OSEG
0000            327            rseg    R_OSEG
0000            328   ;--------------------------------------------------------
0000            329   ; indirectly addressable internal ram data
0000            330   ;--------------------------------------------------------
0000            331            rseg R_ISEG
0000            332   ;--------------------------------------------------------
0000            333   ; absolute internal ram data
0000            334   ;--------------------------------------------------------
0000            335            DSEG
0000            336   ;--------------------------------------------------------
0000            337   ; bit data
0000            338   ;--------------------------------------------------------
0000            339            rseg R_BSEG
0000            340   ;--------------------------------------------------------
0000            341   ; paged external ram data
0000            342   ;--------------------------------------------------------
0000            343            rseg R_PSEG
0000            344   ;--------------------------------------------------------
0000            345   ; external ram data
0000            346   ;--------------------------------------------------------
0000            347            rseg R_XSEG
0000            348   ;--------------------------------------------------------
0000            349   ; absolute external ram data
0000            350   ;--------------------------------------------------------
0000            351            XSEG
0000            352   ;--------------------------------------------------------
0000            353   ; external initialized ram data
0000            354   ;--------------------------------------------------------
0000            355            rseg R_IXSEG
0000            356            rseg R_HOME
0000            357            rseg R_GSINIT
0000            358            rseg R_CSEG
0000            359   ;--------------------------------------------------------
0000            360   ; Reset entry point and interrupt vectors
0000            361   ;--------------------------------------------------------
0000            362            CSEG at 0x0000
0000 020100     363            ljmp    _crt0
0003            364   ;--------------------------------------------------------
0003            365   ; global & static initialisations
0003            366   ;--------------------------------------------------------
0000            367            rseg R_HOME
0000            368            rseg R_GSINIT
0000            369            rseg R_GSINIT
0000            370   ;--------------------------------------------------------
0000            371   ; data variables initialization
0000            372   ;--------------------------------------------------------
0000            373            rseg R_DINIT
0000            374   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:64: volatile int position = 1111;
0000 75C857     375            mov     _position,#0x57
0003 75C904     376            mov     (_position + 1),#0x04
0006            377   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:65: volatile int setPoint = 808;
0006 758828     378            mov     _setPoint,#0x28
0009 758903     379            mov     (_setPoint + 1),#0x03
000C            380   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:66: volatile int ySetPoint = 909;
000C 75488D     381            mov     _ySetPoint,#0x8D
000F 754903     382            mov     (_ySetPoint + 1),#0x03
0012            383   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:67: volatile int error = 0;
0012 E4         384            clr     a
0013 F500       385            mov     _error,a
0015 F501       386            mov     (_error + 1),a
0017            387   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:68: volatile int prevError = 0;
0017 E4         388            clr     a
0018 F5C0       389            mov     _prevError,a
001A F5C1       390            mov     (_prevError + 1),a
001C            391   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:70: volatile int errSum = 0;
001C E4         392            clr     a
001D F540       393            mov     _errSum,a
001F F541       394            mov     (_errSum + 1),a
0021            395   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:71: volatile int dErr = 0;
0021 E4         396            clr     a
0022 F500       397            mov     _dErr,a
0024 F501       398            mov     (_dErr + 1),a
0026            399   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:72: volatile int pwm_temp = 0;
0026 E4         400            clr     a
0027 F5C0       401            mov     _pwm_temp,a
0029 F5C1       402            mov     (_pwm_temp + 1),a
002B            403            ; The linker places a 'ret' at the end of segment R_DINIT.
002B            404   ;--------------------------------------------------------
002B            405   ; code
002B            406   ;--------------------------------------------------------
0000            407            rseg R_CSEG
0000            408   ;------------------------------------------------------------
0000            409   ;Allocation info for local variables in function '_c51_external_startup'
0000            410   ;------------------------------------------------------------
0000            411   ;------------------------------------------------------------
0000            412   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:75: unsigned char _c51_external_startup(void)
0000            413   ;        -----------------------------------------
0000            414   ;         function _c51_external_startup
0000            415   ;        -----------------------------------------
0000            416   __c51_external_startup:
0000            417            using   0
0000            418   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:78: P0M0=0;         P0M1=0;
0000 75E600     419            mov     _P0M0,#0x00
0003 75E700     420            mov     _P0M1,#0x00
0006            421   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:79: P1M0=0;         P1M1=0;
0006 75D600     422            mov     _P1M0,#0x00
0009 75D700     423            mov     _P1M1,#0x00
000C            424   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:80: P2M0=0;         P2M1=0;
000C 75CE00     425            mov     _P2M0,#0x00
000F 75CF00     426            mov     _P2M1,#0x00
0012            427   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:81: P3M0=0;         P3M1=0;
0012 75C600     428            mov     _P3M0,#0x00
0015 75C700     429            mov     _P3M1,#0x00
0018            430   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:82: AUXR=0B_0001_0001; // 1152 bytes of internal XDATA, P4.4 is a general purpose I/O
0018 758E11     431            mov     _AUXR,#0x11
001B            432   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:83: P4M0=0;         P4M1=0;
001B 75BE00     433            mov     _P4M0,#0x00
001E 75BF00     434            mov     _P4M1,#0x00
0021            435   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:86: PCON|=0x80;
0021 438780     436            orl     _PCON,#0x80
0024            437   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:87: SCON = 0x52;
0024 759852     438            mov     _SCON,#0x52
0027            439   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:88: BDRCON=0;
0027 759B00     440            mov     _BDRCON,#0x00
002A            441   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:89: BRL=BRG_VAL;
002A 759AFA     442            mov     _BRL,#0xFA
002D            443   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:90: BDRCON=BRR|TBCK|RBCK|SPD;
002D 759B1E     444            mov     _BDRCON,#0x1E
0030            445   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:93: TMOD=0B_0001_0001; // 0001 is 16-bit mode (Enhanced Timer 1, p77 in docs)
0030 758911     446            mov     _TMOD,#0x11
0033            447   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:95: TCONB=0B_11000000; //P3_5 PWM ENABLED 
0033 7591C0     448            mov     _TCONB,#0xC0
0036            449   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:97: TR0=0;
0036 C28C       450            clr     _TR0
0038            451   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:98: TR0=1;
0038 D28C       452            setb    _TR0
003A            453   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:99: TR1=1;
003A D28E       454            setb    _TR1
003C            455   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:101: RL1=250;
003C 75F3FA     456            mov     _RL1,#0xFA
003F            457   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:102: RL0=250; 
003F 75F2FA     458            mov     _RL0,#0xFA
0042            459   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:104: RH1=128; //Pin3.5
0042 75F580     460            mov     _RH1,#0x80
0045            461   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:105: RH0=128; //Pin3.4
0045 75F480     462            mov     _RH0,#0x80
0048            463   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:107: return 0;
0048 758200     464            mov     dpl,#0x00
004B 22         465            ret
004C            466   ;------------------------------------------------------------
004C            467   ;Allocation info for local variables in function 'main'
004C            468   ;------------------------------------------------------------
004C            469   ;temp_pwm                  Allocated to registers r2 r3 
004C            470   ;------------------------------------------------------------
004C            471   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:110: void main (void)
004C            472   ;        -----------------------------------------
004C            473   ;         function main
004C            474   ;        -----------------------------------------
004C            475   _main:
004C            476   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:114: resetHCTL(1);
004C 900001     477            mov     dptr,#0x0001
004F 120100     478            lcall   _resetHCTL
0052            479   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:115: resetHCTL(2);
0052 900002     480            mov     dptr,#0x0002
0055 120100     481            lcall   _resetHCTL
0058            482   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:118: printf( FORE_BACK, COLOR_BLACK, COLOR_WHITE );
0058 7407       483            mov     a,#0x07
005A C0E0       484            push    acc
005C E4         485            clr     a
005D C0E0       486            push    acc
005F E4         487            clr     a
0060 C0E0       488            push    acc
0062 C0E0       489            push    acc
0064 74D8       490            mov     a,#__str_0
0066 C0E0       491            push    acc
0068 747E       492            mov     a,#(__str_0 >> 8)
006A C0E0       493            push    acc
006C 7480       494            mov     a,#0x80
006E C0E0       495            push    acc
0070 120100     496            lcall   _printf
0073 E581       497            mov     a,sp
0075 24F9       498            add     a,#0xf9
0077 F581       499            mov     sp,a
0079            500   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:119: printf( CLEAR_SCREEN );
0079 7498       501            mov     a,#__str_1
007B C0E0       502            push    acc
007D 747F       503            mov     a,#(__str_1 >> 8)
007F C0E0       504            push    acc
0081 7480       505            mov     a,#0x80
0083 C0E0       506            push    acc
0085 120100     507            lcall   _printf
0088 1581       508            dec     sp
008A 1581       509            dec     sp
008C 1581       510            dec     sp
008E            511   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:120: printf( GOTO_YX, 1, 1 );
008E 7401       512            mov     a,#0x01
0090 C0E0       513            push    acc
0092 E4         514            clr     a
0093 C0E0       515            push    acc
0095 7401       516            mov     a,#0x01
0097 C0E0       517            push    acc
0099 E4         518            clr     a
009A C0E0       519            push    acc
009C 74D8       520            mov     a,#__str_2
009E C0E0       521            push    acc
00A0 747F       522            mov     a,#(__str_2 >> 8)
00A2 C0E0       523            push    acc
00A4 7480       524            mov     a,#0x80
00A6 C0E0       525            push    acc
00A8 120100     526            lcall   _printf
00AB E581       527            mov     a,sp
00AD 24F9       528            add     a,#0xf9
00AF F581       529            mov     sp,a
00B1            530   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:121: printf("Motor Angle      :::");
00B1 7418       531            mov     a,#__str_3
00B3 C0E0       532            push    acc
00B5 7480       533            mov     a,#(__str_3 >> 8)
00B7 C0E0       534            push    acc
00B9 7480       535            mov     a,#0x80
00BB C0E0       536            push    acc
00BD 120100     537            lcall   _printf
00C0 1581       538            dec     sp
00C2 1581       539            dec     sp
00C4 1581       540            dec     sp
00C6            541   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:122: printf("\nController Angle ::: ");
00C6 7458       542            mov     a,#__str_4
00C8 C0E0       543            push    acc
00CA 7480       544            mov     a,#(__str_4 >> 8)
00CC C0E0       545            push    acc
00CE 7480       546            mov     a,#0x80
00D0 C0E0       547            push    acc
00D2 120100     548            lcall   _printf
00D5 1581       549            dec     sp
00D7 1581       550            dec     sp
00D9 1581       551            dec     sp
00DB            552   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:123: printf("\nLinear Position  ::: ");
00DB 7498       553            mov     a,#__str_5
00DD C0E0       554            push    acc
00DF 7480       555            mov     a,#(__str_5 >> 8)
00E1 C0E0       556            push    acc
00E3 7480       557            mov     a,#0x80
00E5 C0E0       558            push    acc
00E7 120100     559            lcall   _printf
00EA 1581       560            dec     sp
00EC 1581       561            dec     sp
00EE 1581       562            dec     sp
00F0            563   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:125: while(1)
00F0            564   L003002?:
00F0            565   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:127: printf( GOTO_YX, 1, 21 );
00F0 7415       566            mov     a,#0x15
00F2 C0E0       567            push    acc
00F4 E4         568            clr     a
00F5 C0E0       569            push    acc
00F7 7401       570            mov     a,#0x01
00F9 C0E0       571            push    acc
00FB E4         572            clr     a
00FC C0E0       573            push    acc
00FE 74D8       574            mov     a,#__str_2
0100 C0E0       575            push    acc
0102 747F       576            mov     a,#(__str_2 >> 8)
0104 C0E0       577            push    acc
0106 7480       578            mov     a,#0x80
0108 C0E0       579            push    acc
010A 120100     580            lcall   _printf
010D E581       581            mov     a,sp
010F 24F9       582            add     a,#0xf9
0111 F581       583            mov     sp,a
0113            584   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:128: position = decode()/33.33;     //HCTL1 Reading in degrees
0113 120100     585            lcall   _decode
0116 120100     586            lcall   ___uint2fs
0119 AA82       587            mov     r2,dpl
011B AB83       588            mov     r3,dph
011D ACF0       589            mov     r4,b
011F FD         590            mov     r5,a
0120 74EC       591            mov     a,#0xEC
0122 C0E0       592            push    acc
0124 7451       593            mov     a,#0x51
0126 C0E0       594            push    acc
0128 7405       595            mov     a,#0x05
012A C0E0       596            push    acc
012C 7442       597            mov     a,#0x42
012E C0E0       598            push    acc
0130 8A82       599            mov     dpl,r2
0132 8B83       600            mov     dph,r3
0134 8CF0       601            mov     b,r4
0136 ED         602            mov     a,r5
0137 120100     603            lcall   ___fsdiv
013A AA82       604            mov     r2,dpl
013C AB83       605            mov     r3,dph
013E ACF0       606            mov     r4,b
0140 FD         607            mov     r5,a
0141 E581       608            mov     a,sp
0143 24FC       609            add     a,#0xfc
0145 F581       610            mov     sp,a
0147 8A82       611            mov     dpl,r2
0149 8B83       612            mov     dph,r3
014B 8CF0       613            mov     b,r4
014D ED         614            mov     a,r5
014E 120100     615            lcall   ___fs2sint
0151 8582C8     616            mov     _position,dpl
0154 8583C9     617            mov     (_position + 1),dph
0157            618   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:129: printf("%i     ", position);
0157 C0C8       619            push    _position
0159 C0C9       620            push    (_position + 1)
015B 7458       621            mov     a,#__str_6
015D C0E0       622            push    acc
015F 7482       623            mov     a,#(__str_6 >> 8)
0161 C0E0       624            push    acc
0163 7480       625            mov     a,#0x80
0165 C0E0       626            push    acc
0167 120100     627            lcall   _printf
016A E581       628            mov     a,sp
016C 24FB       629            add     a,#0xfb
016E F581       630            mov     sp,a
0170            631   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:130: setPoint = GetADC(2)/3.196;       //Angular Pot Reading in degrees
0170 758202     632            mov     dpl,#0x02
0173 120100     633            lcall   _GetADC
0176 120100     634            lcall   ___uint2fs
0179 AA82       635            mov     r2,dpl
017B AB83       636            mov     r3,dph
017D ACF0       637            mov     r4,b
017F FD         638            mov     r5,a
0180 7444       639            mov     a,#0x44
0182 C0E0       640            push    acc
0184 748B       641            mov     a,#0x8B
0186 C0E0       642            push    acc
0188 744C       643            mov     a,#0x4C
018A C0E0       644            push    acc
018C 7440       645            mov     a,#0x40
018E C0E0       646            push    acc
0190 8A82       647            mov     dpl,r2
0192 8B83       648            mov     dph,r3
0194 8CF0       649            mov     b,r4
0196 ED         650            mov     a,r5
0197 120100     651            lcall   ___fsdiv
019A AA82       652            mov     r2,dpl
019C AB83       653            mov     r3,dph
019E ACF0       654            mov     r4,b
01A0 FD         655            mov     r5,a
01A1 E581       656            mov     a,sp
01A3 24FC       657            add     a,#0xfc
01A5 F581       658            mov     sp,a
01A7 8A82       659            mov     dpl,r2
01A9 8B83       660            mov     dph,r3
01AB 8CF0       661            mov     b,r4
01AD ED         662            mov     a,r5
01AE 120100     663            lcall   ___fs2sint
01B1 858288     664            mov     _setPoint,dpl
01B4 858389     665            mov     (_setPoint + 1),dph
01B7            666   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:131: printf( GOTO_YX, 2, 21 );
01B7 7415       667            mov     a,#0x15
01B9 C0E0       668            push    acc
01BB E4         669            clr     a
01BC C0E0       670            push    acc
01BE 7402       671            mov     a,#0x02
01C0 C0E0       672            push    acc
01C2 E4         673            clr     a
01C3 C0E0       674            push    acc
01C5 74D8       675            mov     a,#__str_2
01C7 C0E0       676            push    acc
01C9 747F       677            mov     a,#(__str_2 >> 8)
01CB C0E0       678            push    acc
01CD 7480       679            mov     a,#0x80
01CF C0E0       680            push    acc
01D1 120100     681            lcall   _printf
01D4 E581       682            mov     a,sp
01D6 24F9       683            add     a,#0xf9
01D8 F581       684            mov     sp,a
01DA            685   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:132: printf("%i    ", setPoint);
01DA C088       686            push    _setPoint
01DC C089       687            push    (_setPoint + 1)
01DE 7498       688            mov     a,#__str_7
01E0 C0E0       689            push    acc
01E2 7482       690            mov     a,#(__str_7 >> 8)
01E4 C0E0       691            push    acc
01E6 7480       692            mov     a,#0x80
01E8 C0E0       693            push    acc
01EA 120100     694            lcall   _printf
01ED E581       695            mov     a,sp
01EF 24FB       696            add     a,#0xfb
01F1 F581       697            mov     sp,a
01F3            698   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:133: ySetPoint = GetADC(1)/9.3184;  //Linear Pot Reading out of 100
01F3 758201     699            mov     dpl,#0x01
01F6 120100     700            lcall   _GetADC
01F9 120100     701            lcall   ___uint2fs
01FC AA82       702            mov     r2,dpl
01FE AB83       703            mov     r3,dph
0200 ACF0       704            mov     r4,b
0202 FD         705            mov     r5,a
0203 742B       706            mov     a,#0x2B
0205 C0E0       707            push    acc
0207 7418       708            mov     a,#0x18
0209 C0E0       709            push    acc
020B 7415       710            mov     a,#0x15
020D C0E0       711            push    acc
020F 7441       712            mov     a,#0x41
0211 C0E0       713            push    acc
0213 8A82       714            mov     dpl,r2
0215 8B83       715            mov     dph,r3
0217 8CF0       716            mov     b,r4
0219 ED         717            mov     a,r5
021A 120100     718            lcall   ___fsdiv
021D AA82       719            mov     r2,dpl
021F AB83       720            mov     r3,dph
0221 ACF0       721            mov     r4,b
0223 FD         722            mov     r5,a
0224 E581       723            mov     a,sp
0226 24FC       724            add     a,#0xfc
0228 F581       725            mov     sp,a
022A 8A82       726            mov     dpl,r2
022C 8B83       727            mov     dph,r3
022E 8CF0       728            mov     b,r4
0230 ED         729            mov     a,r5
0231 120100     730            lcall   ___fs2sint
0234 858248     731            mov     _ySetPoint,dpl
0237 858349     732            mov     (_ySetPoint + 1),dph
023A            733   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:134: printf( GOTO_YX, 3, 21 );
023A 7415       734            mov     a,#0x15
023C C0E0       735            push    acc
023E E4         736            clr     a
023F C0E0       737            push    acc
0241 7403       738            mov     a,#0x03
0243 C0E0       739            push    acc
0245 E4         740            clr     a
0246 C0E0       741            push    acc
0248 74D8       742            mov     a,#__str_2
024A C0E0       743            push    acc
024C 747F       744            mov     a,#(__str_2 >> 8)
024E C0E0       745            push    acc
0250 7480       746            mov     a,#0x80
0252 C0E0       747            push    acc
0254 120100     748            lcall   _printf
0257 E581       749            mov     a,sp
0259 24F9       750            add     a,#0xf9
025B F581       751            mov     sp,a
025D            752   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:135: printf("%i    ", ySetPoint);
025D C048       753            push    _ySetPoint
025F C049       754            push    (_ySetPoint + 1)
0261 7498       755            mov     a,#__str_7
0263 C0E0       756            push    acc
0265 7482       757            mov     a,#(__str_7 >> 8)
0267 C0E0       758            push    acc
0269 7480       759            mov     a,#0x80
026B C0E0       760            push    acc
026D 120100     761            lcall   _printf
0270 E581       762            mov     a,sp
0272 24FB       763            add     a,#0xfb
0274 F581       764            mov     sp,a
0276            765   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:137: error = setPoint - position;
0276 E588       766            mov     a,_setPoint
0278 C3         767            clr     c
0279 95C8       768            subb    a,_position
027B F500       769            mov     _error,a
027D E589       770            mov     a,(_setPoint + 1)
027F 95C9       771            subb    a,(_position + 1)
0281 F501       772            mov     (_error + 1),a
0283            773   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:139: temp_pwm = PIDcalculation(error); //WILL CHANGE WITH dT
0283 850082     774            mov     dpl,_error
0286 850183     775            mov     dph,(_error + 1)
0289 120100     776            lcall   _PIDcalculation
028C AA82       777            mov     r2,dpl
028E AB83       778            mov     r3,dph
0290            779   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:141: printf("\nPWM ::: %i    ", temp_pwm);
0290 C002       780            push    ar2
0292 C003       781            push    ar3
0294 C002       782            push    ar2
0296 C003       783            push    ar3
0298 74D8       784            mov     a,#__str_8
029A C0E0       785            push    acc
029C 7482       786            mov     a,#(__str_8 >> 8)
029E C0E0       787            push    acc
02A0 7480       788            mov     a,#0x80
02A2 C0E0       789            push    acc
02A4 120100     790            lcall   _printf
02A7 E581       791            mov     a,sp
02A9 24FB       792            add     a,#0xfb
02AB F581       793            mov     sp,a
02AD D003       794            pop     ar3
02AF D002       795            pop     ar2
02B1            796   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:143: RH0 = temp_pwm;
02B1 8AF4       797            mov     _RH0,r2
02B3 020100     798            ljmp    L003002?
02B6            799   ;------------------------------------------------------------
02B6            800   ;Allocation info for local variables in function 'PIDcalculation'
02B6            801   ;------------------------------------------------------------
02B6            802   ;error                     Allocated with name '_PIDcalculation_error_1_77'
02B6            803   ;output                    Allocated to registers r2 r3 
02B6            804   ;sloc0                     Allocated with name '_PIDcalculation_sloc0_1_0'
02B6            805   ;------------------------------------------------------------
02B6            806   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:147: int PIDcalculation (int error){
02B6            807   ;        -----------------------------------------
02B6            808   ;         function PIDcalculation
02B6            809   ;        -----------------------------------------
02B6            810   _PIDcalculation:
02B6 858228     811            mov     _PIDcalculation_error_1_77,dpl
02B9 858329     812            mov     (_PIDcalculation_error_1_77 + 1),dph
02BC            813   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:151: if(error<-1700)
02BC C3         814            clr     c
02BD E528       815            mov     a,_PIDcalculation_error_1_77
02BF 945C       816            subb    a,#0x5C
02C1 E529       817            mov     a,(_PIDcalculation_error_1_77 + 1)
02C3 6480       818            xrl     a,#0x80
02C5 9479       819            subb    a,#0x79
02C7 5001       820            jnc     L004002?
02C9            821   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:152: error=50;
02C9 752832     822            mov     _PIDcalculation_error_1_77,#0x32
02CC E4         823            clr     a
02CD F529       824            mov     (_PIDcalculation_error_1_77 + 1),a
02CF            825   L004002?:
02CF            826   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:155: errSum += error * dT;
02CF 852882     827            mov     dpl,_PIDcalculation_error_1_77
02D2 852983     828            mov     dph,(_PIDcalculation_error_1_77 + 1)
02D5 120100     829            lcall   ___sint2fs
02D8 AC82       830            mov     r4,dpl
02DA AD83       831            mov     r5,dph
02DC AEF0       832            mov     r6,b
02DE FF         833            mov     r7,a
02DF C004       834            push    ar4
02E1 C005       835            push    ar5
02E3 C006       836            push    ar6
02E5 C007       837            push    ar7
02E7 C004       838            push    ar4
02E9 C005       839            push    ar5
02EB C006       840            push    ar6
02ED C007       841            push    ar7
02EF 9073D4     842            mov     dptr,#0x73D4
02F2 75F05A     843            mov     b,#0x5A
02F5 743A       844            mov     a,#0x3A
02F7 120100     845            lcall   ___fsmul
02FA 858278     846            mov     _PIDcalculation_sloc0_1_0,dpl
02FD 858379     847            mov     (_PIDcalculation_sloc0_1_0 + 1),dph
0300 85F07A     848            mov     (_PIDcalculation_sloc0_1_0 + 2),b
0303 F57B       849            mov     (_PIDcalculation_sloc0_1_0 + 3),a
0305 E581       850            mov     a,sp
0307 24FC       851            add     a,#0xfc
0309 F581       852            mov     sp,a
030B 854082     853            mov     dpl,_errSum
030E 854183     854            mov     dph,(_errSum + 1)
0311 120100     855            lcall   ___sint2fs
0314 AA82       856            mov     r2,dpl
0316 AB83       857            mov     r3,dph
0318 A8F0       858            mov     r0,b
031A F9         859            mov     r1,a
031B C078       860            push    _PIDcalculation_sloc0_1_0
031D C079       861            push    (_PIDcalculation_sloc0_1_0 + 1)
031F C07A       862            push    (_PIDcalculation_sloc0_1_0 + 2)
0321 C07B       863            push    (_PIDcalculation_sloc0_1_0 + 3)
0323 8A82       864            mov     dpl,r2
0325 8B83       865            mov     dph,r3
0327 88F0       866            mov     b,r0
0329 E9         867            mov     a,r1
032A 120100     868            lcall   ___fsadd
032D AA82       869            mov     r2,dpl
032F AB83       870            mov     r3,dph
0331 A8F0       871            mov     r0,b
0333 F9         872            mov     r1,a
0334 E581       873            mov     a,sp
0336 24FC       874            add     a,#0xfc
0338 F581       875            mov     sp,a
033A 8A82       876            mov     dpl,r2
033C 8B83       877            mov     dph,r3
033E 88F0       878            mov     b,r0
0340 E9         879            mov     a,r1
0341 120100     880            lcall   ___fs2sint
0344 858240     881            mov     _errSum,dpl
0347 858341     882            mov     (_errSum + 1),dph
034A            883   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:156: dErr = (error - fivePointMovingAvg(prevError)); //Dividing by dT makes this huge
034A 85C082     884            mov     dpl,_prevError
034D 85C183     885            mov     dph,(_prevError + 1)
0350 120100     886            lcall   _fivePointMovingAvg
0353 AA82       887            mov     r2,dpl
0355 AB83       888            mov     r3,dph
0357 E528       889            mov     a,_PIDcalculation_error_1_77
0359 C3         890            clr     c
035A 9A         891            subb    a,r2
035B F500       892            mov     _dErr,a
035D E529       893            mov     a,(_PIDcalculation_error_1_77 + 1)
035F 9B         894            subb    a,r3
0360 F501       895            mov     (_dErr + 1),a
0362            896   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:159: output = kp * error + ki * errSum + kd * dErr;
0362 854082     897            mov     dpl,_errSum
0365 854183     898            mov     dph,(_errSum + 1)
0368 120100     899            lcall   ___sint2fs
036B AA82       900            mov     r2,dpl
036D AB83       901            mov     r3,dph
036F A8F0       902            mov     r0,b
0371 F9         903            mov     r1,a
0372 C002       904            push    ar2
0374 C003       905            push    ar3
0376 C000       906            push    ar0
0378 C001       907            push    ar1
037A 907CEE     908            mov     dptr,#0x7CEE
037D 75F03F     909            mov     b,#0x3F
0380 743E       910            mov     a,#0x3E
0382 120100     911            lcall   ___fsmul
0385 AA82       912            mov     r2,dpl
0387 AB83       913            mov     r3,dph
0389 A8F0       914            mov     r0,b
038B F9         915            mov     r1,a
038C E581       916            mov     a,sp
038E 24FC       917            add     a,#0xfc
0390 F581       918            mov     sp,a
0392 D007       919            pop     ar7
0394 D006       920            pop     ar6
0396 D005       921            pop     ar5
0398 D004       922            pop     ar4
039A C002       923            push    ar2
039C C003       924            push    ar3
039E C000       925            push    ar0
03A0 C001       926            push    ar1
03A2 8C82       927            mov     dpl,r4
03A4 8D83       928            mov     dph,r5
03A6 8EF0       929            mov     b,r6
03A8 EF         930            mov     a,r7
03A9 120100     931            lcall   ___fsadd
03AC AA82       932            mov     r2,dpl
03AE AB83       933            mov     r3,dph
03B0 ACF0       934            mov     r4,b
03B2 FD         935            mov     r5,a
03B3 E581       936            mov     a,sp
03B5 24FC       937            add     a,#0xfc
03B7 F581       938            mov     sp,a
03B9 850082     939            mov     dpl,_dErr
03BC 850183     940            mov     dph,(_dErr + 1)
03BF C002       941            push    ar2
03C1 C003       942            push    ar3
03C3 C004       943            push    ar4
03C5 C005       944            push    ar5
03C7 120100     945            lcall   ___sint2fs
03CA AE82       946            mov     r6,dpl
03CC AF83       947            mov     r7,dph
03CE A8F0       948            mov     r0,b
03D0 F9         949            mov     r1,a
03D1 C006       950            push    ar6
03D3 C007       951            push    ar7
03D5 C000       952            push    ar0
03D7 C001       953            push    ar1
03D9 904FDF     954            mov     dptr,#0x4FDF
03DC 75F08D     955            mov     b,#0x8D
03DF 743D       956            mov     a,#0x3D
03E1 120100     957            lcall   ___fsmul
03E4 AE82       958            mov     r6,dpl
03E6 AF83       959            mov     r7,dph
03E8 A8F0       960            mov     r0,b
03EA F9         961            mov     r1,a
03EB E581       962            mov     a,sp
03ED 24FC       963            add     a,#0xfc
03EF F581       964            mov     sp,a
03F1 D005       965            pop     ar5
03F3 D004       966            pop     ar4
03F5 D003       967            pop     ar3
03F7 D002       968            pop     ar2
03F9 C006       969            push    ar6
03FB C007       970            push    ar7
03FD C000       971            push    ar0
03FF C001       972            push    ar1
0401 8A82       973            mov     dpl,r2
0403 8B83       974            mov     dph,r3
0405 8CF0       975            mov     b,r4
0407 ED         976            mov     a,r5
0408 120100     977            lcall   ___fsadd
040B AA82       978            mov     r2,dpl
040D AB83       979            mov     r3,dph
040F ACF0       980            mov     r4,b
0411 FD         981            mov     r5,a
0412 E581       982            mov     a,sp
0414 24FC       983            add     a,#0xfc
0416 F581       984            mov     sp,a
0418 8A82       985            mov     dpl,r2
041A 8B83       986            mov     dph,r3
041C 8CF0       987            mov     b,r4
041E ED         988            mov     a,r5
041F 120100     989            lcall   ___fs2sint
0422 AA82       990            mov     r2,dpl
0424 AB83       991            mov     r3,dph
0426            992   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:162: if(output > 128) output = 128;
0426 C3         993            clr     c
0427 7480       994            mov     a,#0x80
0429 9A         995            subb    a,r2
042A E4         996            clr     a
042B 6480       997            xrl     a,#0x80
042D 8BF0       998            mov     b,r3
042F 63F080     999            xrl     b,#0x80
0432 95F0      1000            subb    a,b
0434 5001      1001            jnc     L004006?
0436 7A80      1002            mov     r2,#0x80
0438 7B00      1003            mov     r3,#0x00
043A 8001      1004            sjmp    L004007?
043C           1005   L004006?:
043C           1006   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:163: else if (output < -128) output = -127; //OVERFLOWS AT 255
043C C3        1007            clr     c
043D EA        1008            mov     a,r2
043E 9480      1009            subb    a,#0x80
0440 EB        1010            mov     a,r3
0441 6480      1011            xrl     a,#0x80
0443 947F      1012            subb    a,#0x7f
0445 5001      1013            jnc     L004007?
0447 7A81      1014            mov     r2,#0x81
0449 7BFF      1015            mov     r3,#0xFF
044B           1016   L004007?:
044B           1017   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:164: output = 128 - output;
044B 7480      1018            mov     a,#0x80
044D C3        1019            clr     c
044E 9A        1020            subb    a,r2
044F F5C0      1021            mov     _pwm_temp,a
0451 E4        1022            clr     a
0452 9B        1023            subb    a,r3
0453 F5C1      1024            mov     (_pwm_temp + 1),a
0455           1025   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:168: prevError = error;
0455 8528C0    1026            mov     _prevError,_PIDcalculation_error_1_77
0458 8529C1    1027            mov     (_prevError + 1),(_PIDcalculation_error_1_77 + 1)
045B           1028   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:171: return pwm_temp;
045B 85C082    1029            mov     dpl,_pwm_temp
045E 85C183    1030            mov     dph,(_pwm_temp + 1)
0461 22        1031            ret
0462           1032   ;------------------------------------------------------------
0462           1033   ;Allocation info for local variables in function 'fivePointMovingAvg'
0462           1034   ;------------------------------------------------------------
0462           1035   ;prevError                 Allocated with name '_fivePointMovingAvg_prevError_1_79'
0462           1036   ;i                         Allocated to registers r6 r7 
0462           1037   ;avgError                  Allocated to registers 
0462           1038   ;sum                       Allocated to registers r4 r5 
0462           1039   ;------------------------------------------------------------
0462           1040   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:174: int fivePointMovingAvg (int prevError){
0462           1041   ;        -----------------------------------------
0462           1042   ;         function fivePointMovingAvg
0462           1043   ;        -----------------------------------------
0462           1044   _fivePointMovingAvg:
0462 8582D8    1045            mov     _fivePointMovingAvg_prevError_1_79,dpl
0465 8583D9    1046            mov     (_fivePointMovingAvg_prevError_1_79 + 1),dph
0468           1047   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:176: int avgError, sum = 0;
0468 7C00      1048            mov     r4,#0x00
046A 7D00      1049            mov     r5,#0x00
046C           1050   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:179: for(i=5; i>0; i--)
046C 7E05      1051            mov     r6,#0x05
046E 7F00      1052            mov     r7,#0x00
0470           1053   L005001?:
0470 C3        1054            clr     c
0471 E4        1055            clr     a
0472 9E        1056            subb    a,r6
0473 E4        1057            clr     a
0474 6480      1058            xrl     a,#0x80
0476 8FF0      1059            mov     b,r7
0478 63F080    1060            xrl     b,#0x80
047B 95F0      1061            subb    a,b
047D 5001      1062            jnc     L005004?
047F           1063   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:180: past5[i] = past5[i-1];
047F 8E02      1064            mov     ar2,r6
0481 EF        1065            mov     a,r7
0482 CA        1066            xch     a,r2
0483 25E0      1067            add     a,acc
0485 CA        1068            xch     a,r2
0486 33        1069            rlc     a
0487 EA        1070            mov     a,r2
0488 2480      1071            add     a,#_past5
048A F8        1072            mov     r0,a
048B 8E02      1073            mov     ar2,r6
048D 1A        1074            dec     r2
048E EA        1075            mov     a,r2
048F 2A        1076            add     a,r2
0490 2480      1077            add     a,#_past5
0492 F9        1078            mov     r1,a
0493 8702      1079            mov     ar2,@r1
0495 09        1080            inc     r1
0496 8703      1081            mov     ar3,@r1
0498 19        1082            dec     r1
0499 A602      1083            mov     @r0,ar2
049B 08        1084            inc     r0
049C A603      1085            mov     @r0,ar3
049E 18        1086            dec     r0
049F           1087   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:179: for(i=5; i>0; i--)
049F 1E        1088            dec     r6
04A0 BEFF18    1089            cjne    r6,#0xff,L005018?
04A3 1F        1090            dec     r7
04A4           1091   L005018?:
04A4 8001      1092            sjmp    L005001?
04A6           1093   L005004?:
04A6           1094   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:181: past5[0] = prevError;
04A6 85D880    1095            mov     _past5,_fivePointMovingAvg_prevError_1_79
04A9 85D981    1096            mov     (_past5 + 1),(_fivePointMovingAvg_prevError_1_79 + 1)
04AC           1097   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:184: for(i=6; i>0; i--)
04AC 7A06      1098            mov     r2,#0x06
04AE 7B00      1099            mov     r3,#0x00
04B0           1100   L005005?:
04B0 C3        1101            clr     c
04B1 E4        1102            clr     a
04B2 9A        1103            subb    a,r2
04B3 E4        1104            clr     a
04B4 6480      1105            xrl     a,#0x80
04B6 8BF0      1106            mov     b,r3
04B8 63F080    1107            xrl     b,#0x80
04BB 95F0      1108            subb    a,b
04BD 5001      1109            jnc     L005008?
04BF           1110   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:185: sum += past5[i];
04BF 8A06      1111            mov     ar6,r2
04C1 EB        1112            mov     a,r3
04C2 CE        1113            xch     a,r6
04C3 25E0      1114            add     a,acc
04C5 CE        1115            xch     a,r6
04C6 33        1116            rlc     a
04C7 EE        1117            mov     a,r6
04C8 2480      1118            add     a,#_past5
04CA F8        1119            mov     r0,a
04CB 8606      1120            mov     ar6,@r0
04CD 08        1121            inc     r0
04CE 8607      1122            mov     ar7,@r0
04D0 18        1123            dec     r0
04D1 EE        1124            mov     a,r6
04D2 2C        1125            add     a,r4
04D3 FC        1126            mov     r4,a
04D4 EF        1127            mov     a,r7
04D5 3D        1128            addc    a,r5
04D6 FD        1129            mov     r5,a
04D7           1130   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:184: for(i=6; i>0; i--)
04D7 1A        1131            dec     r2
04D8 BAFFD8    1132            cjne    r2,#0xff,L005020?
04DB 1B        1133            dec     r3
04DC           1134   L005020?:
04DC 8001      1135            sjmp    L005005?
04DE           1136   L005008?:
04DE           1137   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:186: avgError = sum / 5;
04DE 750005    1138            mov     __divsint_PARM_2,#0x05
04E1 E4        1139            clr     a
04E2 F501      1140            mov     (__divsint_PARM_2 + 1),a
04E4 8C82      1141            mov     dpl,r4
04E6 8D83      1142            mov     dph,r5
04E8           1143   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:188: return avgError;
04E8 020100    1144            ljmp    __divsint
04EB           1145   ;------------------------------------------------------------
04EB           1146   ;Allocation info for local variables in function 'waitms'
04EB           1147   ;------------------------------------------------------------
04EB           1148   ;------------------------------------------------------------
04EB           1149   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:191: void waitms (void){
04EB           1150   ;        -----------------------------------------
04EB           1151   ;         function waitms
04EB           1152   ;        -----------------------------------------
04EB           1153   _waitms:
04EB           1154   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:200: _endasm;
04EB           1155            
04EB 7A01      1156            mov R2, #1
04ED           1157            L3:
04ED 7901      1158            mov R1, #1
04EF           1159            L2:
04EF 78B8      1160            mov R0, #184
04F1           1161            L1:
04F1 D828      1162            djnz R0, L1 ; 2 machine cycles-> 0.5425347us*184=100us
04F3 D9E8      1163            djnz R1, L2 ; 100us*10=1ms
04F5 DAA8      1164            djnz R2, L3 ; 1ms*25= 25ms
04F7 22        1165            ret
04F8 22        1166            ret
04F9           1167   ;------------------------------------------------------------
04F9           1168   ;Allocation info for local variables in function 'resetHCTL'
04F9           1169   ;------------------------------------------------------------
04F9           1170   ;select                    Allocated to registers 
04F9           1171   ;------------------------------------------------------------
04F9           1172   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:203: void resetHCTL (int select)
04F9           1173   ;        -----------------------------------------
04F9           1174   ;         function resetHCTL
04F9           1175   ;        -----------------------------------------
04F9           1176   _resetHCTL:
04F9           1177   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:206: P1_1 = 0; //Clear HCTL
04F9 C291      1178            clr     _P1_1
04FB           1179   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:208: P1_1 = 1;
04FB D291      1180            setb    _P1_1
04FD 22        1181            ret
04FE           1182   ;------------------------------------------------------------
04FE           1183   ;Allocation info for local variables in function 'decode'
04FE           1184   ;------------------------------------------------------------
04FE           1185   ;result                    Allocated to registers 
04FE           1186   ;mult                      Allocated to registers 
04FE           1187   ;temp                      Allocated to registers r2 r3 
04FE           1188   ;Result_lo                 Allocated to registers r4 r5 
04FE           1189   ;Result_2nd                Allocated to registers 
04FE           1190   ;Result_3rd                Allocated to registers r2 r3 
04FE           1191   ;Result_hi                 Allocated to registers 
04FE           1192   ;------------------------------------------------------------
04FE           1193   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:236: unsigned int decode (void)
04FE           1194   ;        -----------------------------------------
04FE           1195   ;         function decode
04FE           1196   ;        -----------------------------------------
04FE           1197   _decode:
04FE           1198   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:246: P3_7 = 1; //Disable OE
04FE D2B7      1199            setb    _P3_7
0500           1200   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:248: P4_3 = 0; //Sel1 TEST
0500 C2C3      1201            clr     _P4_3
0502           1202   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:249: P4_4 = 1; //SEL2 = 1 (MSB)
0502 D2C4      1203            setb    _P4_4
0504           1204   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:250: P3_7 = 0; //Enable OE
0504 C2B7      1205            clr     _P3_7
0506           1206   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:251: Result_hi = readBits(); // Get MSB
0506 120100    1207            lcall   _readBits
0509           1208   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:253: P4_3 = 1; //SEL1 = 1 (2nd Byte)
0509 D2C3      1209            setb    _P4_3
050B           1210   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:254: P4_4 = 1; //SEL2 = 1 (2nd Byte)
050B D2C4      1211            setb    _P4_4
050D           1212   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:255: Result_2nd  = readBits();
050D 120100    1213            lcall   _readBits
0510           1214   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:257: P4_3 = 0; //SEL1 = 0 (3rd Byte)
0510 C2C3      1215            clr     _P4_3
0512           1216   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:258: P4_4 = 0; //SEL2 = 0 (3rd Byte)
0512 C2C4      1217            clr     _P4_4
0514           1218   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:259: Result_3rd = readBits();
0514 120100    1219            lcall   _readBits
0517 AA82      1220            mov     r2,dpl
0519 AB83      1221            mov     r3,dph
051B           1222   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:261: P4_3 = 1; //SEL1 = 1 (LSB)
051B D2C3      1223            setb    _P4_3
051D           1224   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:262: P4_4 = 0; //SEL2 = 0 (LSB)
051D C2C4      1225            clr     _P4_4
051F           1226   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:263: Result_lo = readBits(); // Get LSB
051F C002      1227            push    ar2
0521 C003      1228            push    ar3
0523 120100    1229            lcall   _readBits
0526 AC82      1230            mov     r4,dpl
0528 AD83      1231            mov     r5,dph
052A D003      1232            pop     ar3
052C D002      1233            pop     ar2
052E           1234   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:264: P3_7 = 1;                              //Disable OE
052E D2B7      1235            setb    _P3_7
0530           1236   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:271: temp = Result_3rd*mult; //Assign 3rd Byte
0530 750000    1237            mov     __mulint_PARM_2,#0x00
0533 750101    1238            mov     (__mulint_PARM_2 + 1),#0x01
0536 8A82      1239            mov     dpl,r2
0538 8B83      1240            mov     dph,r3
053A C004      1241            push    ar4
053C C005      1242            push    ar5
053E 120100    1243            lcall   __mulint
0541 AA82      1244            mov     r2,dpl
0543 AB83      1245            mov     r3,dph
0545 D005      1246            pop     ar5
0547 D004      1247            pop     ar4
0549           1248   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:272: result = result + temp;
0549 EA        1249            mov     a,r2
054A 2C        1250            add     a,r4
054B F582      1251            mov     dpl,a
054D EB        1252            mov     a,r3
054E 3D        1253            addc    a,r5
054F F583      1254            mov     dph,a
0551           1255   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:282: return result;
0551 22        1256            ret
0552           1257   ;------------------------------------------------------------
0552           1258   ;Allocation info for local variables in function 'readBits'
0552           1259   ;------------------------------------------------------------
0552           1260   ;num                       Allocated to registers 
0552           1261   ;------------------------------------------------------------
0552           1262   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:287: unsigned int readBits(void)
0552           1263   ;        -----------------------------------------
0552           1264   ;         function readBits
0552           1265   ;        -----------------------------------------
0552           1266   _readBits:
0552           1267   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:291: num = P2_7*128 + P2_6*64 + P2_5*32 + P2_4*16 + P2_3*8 + P2_2*4 + P2_1*2 + P2_0*1;
0552 A2A7      1268            mov     c,_P2_7
0554 E4        1269            clr     a
0555 33        1270            rlc     a
0556 FA        1271            mov     r2,a
0557 E4        1272            clr     a
0558 5401      1273            anl     a,#0x01
055A A2E0      1274            mov     c,acc.0
055C CA        1275            xch     a,r2
055D 13        1276            rrc     a
055E CA        1277            xch     a,r2
055F 13        1278            rrc     a
0560 CA        1279            xch     a,r2
0561 FB        1280            mov     r3,a
0562 A2A6      1281            mov     c,_P2_6
0564 E4        1282            clr     a
0565 33        1283            rlc     a
0566 FC        1284            mov     r4,a
0567 E4        1285            clr     a
0568 5403      1286            anl     a,#0x03
056A A2E0      1287            mov     c,acc.0
056C CC        1288            xch     a,r4
056D 13        1289            rrc     a
056E CC        1290            xch     a,r4
056F 13        1291            rrc     a
0570 A2E0      1292            mov     c,acc.0
0572 CC        1293            xch     a,r4
0573 13        1294            rrc     a
0574 CC        1295            xch     a,r4
0575 13        1296            rrc     a
0576 CC        1297            xch     a,r4
0577 FD        1298            mov     r5,a
0578 EC        1299            mov     a,r4
0579 2A        1300            add     a,r2
057A FA        1301            mov     r2,a
057B ED        1302            mov     a,r5
057C 3B        1303            addc    a,r3
057D FB        1304            mov     r3,a
057E A2A5      1305            mov     c,_P2_5
0580 E4        1306            clr     a
0581 33        1307            rlc     a
0582 FC        1308            mov     r4,a
0583 E4        1309            clr     a
0584 C4        1310            swap    a
0585 23        1311            rl      a
0586 54E0      1312            anl     a,#0xe0
0588 CC        1313            xch     a,r4
0589 C4        1314            swap    a
058A 23        1315            rl      a
058B CC        1316            xch     a,r4
058C 6C        1317            xrl     a,r4
058D CC        1318            xch     a,r4
058E 54E0      1319            anl     a,#0xe0
0590 CC        1320            xch     a,r4
0591 6C        1321            xrl     a,r4
0592 FD        1322            mov     r5,a
0593 EC        1323            mov     a,r4
0594 2A        1324            add     a,r2
0595 FA        1325            mov     r2,a
0596 ED        1326            mov     a,r5
0597 3B        1327            addc    a,r3
0598 FB        1328            mov     r3,a
0599 A2A4      1329            mov     c,_P2_4
059B E4        1330            clr     a
059C 33        1331            rlc     a
059D FC        1332            mov     r4,a
059E E4        1333            clr     a
059F C4        1334            swap    a
05A0 54F0      1335            anl     a,#0xf0
05A2 CC        1336            xch     a,r4
05A3 C4        1337            swap    a
05A4 CC        1338            xch     a,r4
05A5 6C        1339            xrl     a,r4
05A6 CC        1340            xch     a,r4
05A7 54F0      1341            anl     a,#0xf0
05A9 CC        1342            xch     a,r4
05AA 6C        1343            xrl     a,r4
05AB FD        1344            mov     r5,a
05AC EC        1345            mov     a,r4
05AD 2A        1346            add     a,r2
05AE FA        1347            mov     r2,a
05AF ED        1348            mov     a,r5
05B0 3B        1349            addc    a,r3
05B1 FB        1350            mov     r3,a
05B2 A2A3      1351            mov     c,_P2_3
05B4 E4        1352            clr     a
05B5 33        1353            rlc     a
05B6 FC        1354            mov     r4,a
05B7 E4        1355            clr     a
05B8 C4        1356            swap    a
05B9 03        1357            rr      a
05BA 54F8      1358            anl     a,#0xf8
05BC CC        1359            xch     a,r4
05BD C4        1360            swap    a
05BE 03        1361            rr      a
05BF CC        1362            xch     a,r4
05C0 6C        1363            xrl     a,r4
05C1 CC        1364            xch     a,r4
05C2 54F8      1365            anl     a,#0xf8
05C4 CC        1366            xch     a,r4
05C5 6C        1367            xrl     a,r4
05C6 FD        1368            mov     r5,a
05C7 EC        1369            mov     a,r4
05C8 2A        1370            add     a,r2
05C9 FA        1371            mov     r2,a
05CA ED        1372            mov     a,r5
05CB 3B        1373            addc    a,r3
05CC FB        1374            mov     r3,a
05CD A2A2      1375            mov     c,_P2_2
05CF E4        1376            clr     a
05D0 33        1377            rlc     a
05D1 FC        1378            mov     r4,a
05D2 E4        1379            clr     a
05D3 CC        1380            xch     a,r4
05D4 25E0      1381            add     a,acc
05D6 CC        1382            xch     a,r4
05D7 33        1383            rlc     a
05D8 CC        1384            xch     a,r4
05D9 25E0      1385            add     a,acc
05DB CC        1386            xch     a,r4
05DC 33        1387            rlc     a
05DD FD        1388            mov     r5,a
05DE EC        1389            mov     a,r4
05DF 2A        1390            add     a,r2
05E0 FA        1391            mov     r2,a
05E1 ED        1392            mov     a,r5
05E2 3B        1393            addc    a,r3
05E3 FB        1394            mov     r3,a
05E4 A2A1      1395            mov     c,_P2_1
05E6 E4        1396            clr     a
05E7 33        1397            rlc     a
05E8 FC        1398            mov     r4,a
05E9 E4        1399            clr     a
05EA CC        1400            xch     a,r4
05EB 25E0      1401            add     a,acc
05ED CC        1402            xch     a,r4
05EE 33        1403            rlc     a
05EF FD        1404            mov     r5,a
05F0 EC        1405            mov     a,r4
05F1 2A        1406            add     a,r2
05F2 FA        1407            mov     r2,a
05F3 ED        1408            mov     a,r5
05F4 3B        1409            addc    a,r3
05F5 FB        1410            mov     r3,a
05F6 A2A0      1411            mov     c,_P2_0
05F8 E4        1412            clr     a
05F9 33        1413            rlc     a
05FA FC        1414            mov     r4,a
05FB 7D00      1415            mov     r5,#0x00
05FD EC        1416            mov     a,r4
05FE 2A        1417            add     a,r2
05FF F582      1418            mov     dpl,a
0601 ED        1419            mov     a,r5
0602 3B        1420            addc    a,r3
0603 F583      1421            mov     dph,a
0605           1422   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:293: return num;
0605 22        1423            ret
0606           1424   ;------------------------------------------------------------
0606           1425   ;Allocation info for local variables in function 'SPIWrite'
0606           1426   ;------------------------------------------------------------
0606           1427   ;value                     Allocated to registers r2 
0606           1428   ;------------------------------------------------------------
0606           1429   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:310: void SPIWrite(unsigned char value)
0606           1430   ;        -----------------------------------------
0606           1431   ;         function SPIWrite
0606           1432   ;        -----------------------------------------
0606           1433   _SPIWrite:
0606 AA82      1434            mov     r2,dpl
0608           1435   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:311: {      SPSTA&=(~SPIF); // Clear the SPIF flag in SPSTA
0608 53C47F    1436            anl     _SPSTA,#0x7F
060B           1437   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:312: SPDAT=value;
060B 8AC5      1438            mov     _SPDAT,r2
060D           1439   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:313: while((SPSTA & SPIF)!=SPIF); //Wait for transmission to end
060D           1440   L010001?:
060D 7480      1441            mov     a,#0x80
060F 55C4      1442            anl     a,_SPSTA
0611 FA        1443            mov     r2,a
0612 BA80E8    1444            cjne    r2,#0x80,L010001?
0615 22        1445            ret
0616           1446   ;------------------------------------------------------------
0616           1447   ;Allocation info for local variables in function 'GetADC'
0616           1448   ;------------------------------------------------------------
0616           1449   ;channel                   Allocated to registers r2 
0616           1450   ;adc                       Allocated to registers r2 r3 
0616           1451   ;------------------------------------------------------------
0616           1452   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:317: unsigned int GetADC(unsigned char channel)
0616           1453   ;        -----------------------------------------
0616           1454   ;         function GetADC
0616           1455   ;        -----------------------------------------
0616           1456   _GetADC:
0616 AA82      1457            mov     r2,dpl
0618           1458   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:322: SPCON&=(~SPEN); // Disable SPI
0618 53C3BF    1459            anl     _SPCON,#0xBF
061B           1460   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:323: SPCON=MSTR|CPOL|CPHA|SPR1|SPR0|SSDIS;
061B 75C33F    1461            mov     _SPCON,#0x3F
061E           1462   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:324: SPCON|=SPEN; // Enable SPI
061E 43C340    1463            orl     _SPCON,#0x40
0621           1464   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:326: CE=0; // Activate the MCP3004 ADC.
0621 C283      1465            clr     _P0_3
0623           1466   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:327: SPIWrite(channel|0x18);        // Send start bit, single/diff* bit, D2, D1, and D0 bits.
0623 7418      1467            mov     a,#0x18
0625 4A        1468            orl     a,r2
0626 F582      1469            mov     dpl,a
0628 120100    1470            lcall   _SPIWrite
062B           1471   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:328: for(adc=0; adc<10; adc++); // Wait for S/H to setup
062B 7A0A      1472            mov     r2,#0x0A
062D 7B00      1473            mov     r3,#0x00
062F           1474   L011003?:
062F 1A        1475            dec     r2
0630 BAFF68    1476            cjne    r2,#0xff,L011009?
0633 1B        1477            dec     r3
0634           1478   L011009?:
0634 EA        1479            mov     a,r2
0635 4B        1480            orl     a,r3
0636 7001      1481            jnz     L011003?
0638           1482   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:329: SPIWrite(0x55); // Read bits 9 down to 4
0638 758255    1483            mov     dpl,#0x55
063B 120100    1484            lcall   _SPIWrite
063E           1485   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:330: adc=((SPDAT&0x3f)*0x100);                                      
063E 743F      1486            mov     a,#0x3F
0640 55C5      1487            anl     a,_SPDAT
0642 FB        1488            mov     r3,a
0643 7A00      1489            mov     r2,#0x00
0645           1490   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:331: SPIWrite(0x55);// Read bits 3 down to 0
0645 758255    1491            mov     dpl,#0x55
0648 C002      1492            push    ar2
064A C003      1493            push    ar3
064C 120100    1494            lcall   _SPIWrite
064F D003      1495            pop     ar3
0651 D002      1496            pop     ar2
0653           1497   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:332: CE=1; // Deactivate the MCP3004 ADC.
0653 D283      1498            setb    _P0_3
0655           1499   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:333: adc+=(SPDAT&0xf0); // SPDR contains the low part of the result. 
0655 74F0      1500            mov     a,#0xF0
0657 55C5      1501            anl     a,_SPDAT
0659 FC        1502            mov     r4,a
065A 7D00      1503            mov     r5,#0x00
065C EC        1504            mov     a,r4
065D 2A        1505            add     a,r2
065E FA        1506            mov     r2,a
065F ED        1507            mov     a,r5
0660 3B        1508            addc    a,r3
0661           1509   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:334: adc>>=4;
0661 C4        1510            swap    a
0662 CA        1511            xch     a,r2
0663 C4        1512            swap    a
0664 540F      1513            anl     a,#0x0f
0666 6A        1514            xrl     a,r2
0667 CA        1515            xch     a,r2
0668 540F      1516            anl     a,#0x0f
066A CA        1517            xch     a,r2
066B 6A        1518            xrl     a,r2
066C CA        1519            xch     a,r2
066D           1520   ;        C:\Users\Patrick\Desktop\Robot-ArmControl\MK1_PID.c:336: return adc;
066D 8A82      1521            mov     dpl,r2
066F F583      1522            mov     dph,a
0671 22        1523            ret
0672           1524            rseg R_CSEG
0672           1525   
0000           1526            rseg R_XINIT
0000           1527   
0000           1528            rseg R_CONST
0000           1529   __str_0:
0000 1B        1530            db 0x1B
0001 5B303B33  1531            db '[0;3%d;4%dm'
     25643B34
     25646D
000C 00        1532            db 0x00
000D           1533   __str_1:
000D 1B        1534            db 0x1B
000E 5B324A    1535            db '[2J'
0011 00        1536            db 0x00
0012           1537   __str_2:
0012 1B        1538            db 0x1B
0013 5B25643B  1539            db '[%d;%dH'
     256448
001A 00        1540            db 0x00
001B           1541   __str_3:
001B 4D6F746F  1542            db 'Motor Angle      :::'
     7220416E
     676C6520
     20202020
     203A3A3A
002F 00        1543            db 0x00
0030           1544   __str_4:
0030 0A        1545            db 0x0A
0031 436F6E74  1546            db 'Controller Angle ::: '
     726F6C6C
     65722041
     6E676C65
     203A3A3A
     20
0046 00        1547            db 0x00
0047           1548   __str_5:
0047 0A        1549            db 0x0A
0048 4C696E65  1550            db 'Linear Position  ::: '
     61722050
     6F736974
     696F6E20
     203A3A3A
     20
005D 00        1551            db 0x00
005E           1552   __str_6:
005E 25692020  1553            db '%i     '
     202020
0065 00        1554            db 0x00
0066           1555   __str_7:
0066 25692020  1556            db '%i    '
     2020
006C 00        1557            db 0x00
006D           1558   __str_8:
006D 0A        1559            db 0x0A
006E 50574D20  1560            db 'PWM ::: %i    '
     3A3A3A20
     25692020
     2020
007C 00        1561            db 0x00
007D           1562   
0003           1563            CSEG
0003           1564   
0003           1565   end
